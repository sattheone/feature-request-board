// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String
  role      String    @default("user") // "admin" or "user"
  requests  FeatureRequest[]
  comments  Comment[]
  upvotes   Upvote[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Board {
  id          String    @id @default(uuid())
  name        String
  description String?
  requests    FeatureRequest[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model FeatureRequest {
  id          String    @id @default(uuid())
  title       String
  description String
  category    String    // e.g., "bug", "feature", "improvement", "integration", "design", "ux", "feedback"
  status      String    @default("open") // e.g., "open", "planned", "in_progress", "completed", "declined"
  boardId     String
  board       Board     @relation(fields: [boardId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  comments    Comment[]
  changelogs  Changelog[]
  upvotes     Upvote[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id         String    @id @default(uuid())
  text       String
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  requestId  String
  request    FeatureRequest @relation(fields: [requestId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Changelog {
  id         String    @id @default(uuid())
  title      String
  content    String
  requestId  String
  request    FeatureRequest @relation(fields: [requestId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Upvote {
  id         String    @id @default(uuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  requestId  String
  request    FeatureRequest @relation(fields: [requestId], references: [id])
  createdAt  DateTime  @default(now())

  @@unique([userId, requestId])
}
